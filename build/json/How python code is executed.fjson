{
    "body": "<div class=\"section\" id=\"how-python-code-is-executed\">\n<h1>How python code is executed<a class=\"headerlink\" href=\"#how-python-code-is-executed\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>At the command line:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;hello\u201c</span>\n</pre></div>\n</div>\n<p>There are four steps that python takes when you hit return lexing, parsing, compiling, and interpreting</p>\n<p>1. <strong>Lexing</strong> is breaking the line of code you just typed into <strong>tokens</strong>\n|\n2. The <strong>parser</strong> takes those <strong>tokens</strong> and generates a structure that shows their relationship to each other (in this case, an <strong>Abstract SyntaxTree</strong>).\n|\n3. The <strong>compiler</strong> then takes the <strong>AST</strong> and turns it into one (or more) <strong>code objects</strong>. (function objects, code objects, and bytecode)\n|\n4. Finally, the <strong>interpreter</strong> takes each code object (It contains information that this interpreter needs to do its job) executes the code it represents</p>\n<div class=\"line-block\">\n<div class=\"line\"><br /></div>\n<div class=\"line\"><br /></div>\n</div>\n<p>to understand how Lexing,prasar &amp; AST work <a class=\"reference external\" href=\"http://www.jayconrod.com/posts/37/a-simple-interpreter-from-scratch-in-python-part-1\">a link</a>.</p>\n</div>\n",
    "title": "How python code is executed",
    "sourcename": "How python code is executed.rst.txt",
    "current_page_name": "How python code is executed",
    "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">How python code is executed</a></li>\n</ul>\n",
    "page_source_suffix": ".rst"
}